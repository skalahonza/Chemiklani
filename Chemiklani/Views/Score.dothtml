@viewModel Chemiklani.ViewModels.ScoreViewModel, Chemiklani
@masterPage Views/MasterPage.dotmaster

<dot:Content ContentPlaceHolderID="MainContent">
    <!-- Team scored notification-->
    <bs:Well class="center" Visible="{value: SummaryDisplayed}">
        <h3>Team scored</h3>
        <bs:Table>
            <tr>
                <td>Team</td>
                <td>{{value: NewScore.SelectedTeam.Name}}</td>
            </tr>
            <tr>
                <td>Task</td>
                <td>{{value: NewScore.SelectedTask.Name}}</td>
            </tr>
            <tr>
                <td>Points</td>
                <td>{{value: NewScore.Points}}</td>
            </tr>
        </bs:Table>
        <bs:Button Text="Cancel" Type="Danger" Click="{command: CancelEvaluation()}" />
        <bs:Button Text="OK" class="pull-right" Click="{staticCommand: SummaryDisplayed = false}" />
    </bs:Well>

    <h2>Teams</h2>
    <bs:ComboBoxGroup LabelText="Rooms"
                      DataSource="{value: Rooms}" EmptyItemText="Select room..."
                      SelectedValue="{value: SelectedRoom}" />

    <bs:HelpText Visible="{value: Teams.Count == 0}">
        <h3 class="text-center">
            There are no teams yet, add them in order to proceed. You can filter teams based on a selected room, or you can display all teams.            
        </h3>
    </bs:HelpText>
    <div class="text-center">
        <bs:ButtonGroup>
            <bs:Button Text="All teams" Type="Success" Click="{command: LoadAllTeams()}" Validation.Enabled="false" />
            <bs:Button Text="Filter" Type="Primary" Click="{command: FilterTeams()}" Validation.Enabled="false" Enabled="{value: SelectedRoom != null}" />
        </bs:ButtonGroup>
    </div>
    <table class="table" Visible="{value: Teams.Count != 0}">
        <thead>
            <tr>
                <th></th>
                <th>Team</th>
                <th>Room</th>
                <th>Category</th>
                <th>Points</th>
            </tr>
        </thead>
        <tbody>
            <dot:Repeater DataSource="{value: Teams}" WrapperTagName="table" RenderWrapperTag="false"
                          Validation.Enabled="false">
                <ItemTemplate>
                    <tr>
                        <td>
                            <bs:LinkButton Text="Score" Click="{command: _parent.EvaluateTeam(_this)}" Validation.Enabled="false" />
                        </td>
                        <td class="col-md-10">{{value: Name}}</td>
                        <td class="col-md-10">{{value: Room}}</td>
                        <td class="col-md-10">{{value: Category}}</td>
                        <td class="col-md-10">{{value: Points}}</td>
                    </tr>
                </ItemTemplate>
            </dot:Repeater>
        </tbody>
    </table>

    <!-- Score a team Dialog-->
    <bs:ModalDialog HeaderText="Score team"
                    DataContext="{value: _this}"
                    IsDisplayed="{value: Displayed}"
                    Size="Large">
        <ContentTemplate>
            <div DataContext="{value: NewScore}">
                <h3>Team: {{value: SelectedTeam.Name}}</h3>
                <bs:Label Text="Task" />
                <bs:ButtonGroup IsJustified="true">
                    <dot:Repeater RenderWrapperTag="false"
                                  DataSource="{value: Tasks}">
                        <ItemTemplate>
                            <bs:Column SizeSM="2">
                                <bs:Button Validation.Enabled="false"
                                           class="{value: _root.NewScore.SelectedTask != null && 
                                           _root.NewScore.SelectedTask.Id == Id ? "btn form-control btn-info" 
                                           :(AlreadyEvaluated ? "btn form-control btn-warning" : "btn form-control btn-default")}"
                                           Click="{command: _root.TaskChanged(_this)}"
                                           Text="{value: _this.Name}" />
                            </bs:Column>
                        </ItemTemplate>
                    </dot:Repeater>
                </bs:ButtonGroup>
                <bs:Label Text="Body" />
                <bs:Alert Type="Warning" Text="You are about to score a previously scored task. Previous data will be overridden."
                          Visible="{value: SelectedTask.AlreadyEvaluated}" />

                <bs:ButtonGroup Visible="{value: _root.MiniScoreDisplayed && SelectedTask != null}"
                                IsJustified="true">
                    <dot:Repeater RenderWrapperTag="false"
                                  DataSource="{value: PointOptions}">
                        <ItemTemplate>
                            <bs:Button Validation.Enabled="false"
                                       class="{value: _root.NewScore.Points == _this ? "btn btn-info": (_parent.SelectedTask.AlreadyEvaluatedPoints == _this ? "btn btn-warning" : "btn btn-default")}"
                                       Click="{command: _root.PointsChanged(_this)}"
                                       Text="{value: _this}" />
                        </ItemTemplate>
                    </dot:Repeater>
                </bs:ButtonGroup>

                <dot:TextBox Visible="{value: !_root.MiniScoreDisplayed && SelectedTask != null}"
                             Type="Number" class="form-control"
                             max="{value: SelectedTask.MaximumPoints}"
                             Text="{value: Points}" />
            </div>
        </ContentTemplate>
        <FooterTemplate>
            <div class="text-center">
                <bs:Button ButtonTagName="button" Type="Danger" Click="{staticCommand: Displayed = false}">
                    <bs:GlyphIcon Icon="Ban_circle" /> Cancel
                </bs:Button>
                <bs:Button ButtonTagName="button" Type="Success" Validation.Enabled="true" Validation.Target="{value: _root.NewScore}" Click="{command: Evaluate()}">
                    <bs:GlyphIcon Icon="Ok" /> Score
                </bs:Button>
            </div>
        </FooterTemplate>
    </bs:ModalDialog>
</dot:Content>

